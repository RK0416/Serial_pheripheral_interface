`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date: 28.03.2024 17:40:14
// Design Name: 
// Module Name: SPIbus
// Project Name: 
// Target Devices: 
// Tool Versions: 
// Description: 
// 
// Dependencies: 
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
//////////////////////////////////////////////////////////////////////////////////


module master(
    input [7:0] data_in,   
    output [7:0] data_out,
    input [1:0] slave_num,
    input clk,
    input enable,
    input rst,
    input cpha, 
    input cpol,
    input miso,
    output reg mosi,
    output reg cs0,
    output reg cs1,
    output reg cs2
    );
    //It can have 8 or 16 bits for communication
     integer mode; //for cpol and cpha variables 
     reg [7:0]data;
     
     assign data_out=data; // initialising data with zeros
     
     always @ (posedge clk or negedge clk)begin
        if(clk == 1)begin
            if(rst ==1)begin
                data=8'b00000000;
                // cs case 1 is  deselect and 0 is select 
                cs0 <= 1'b1 ;
                cs1 <= 1'b1 ;
                cs2 <= 1'b1 ;
                mosi <= 1'b0 ; 
            end
            else if( enable == 1)begin
                case(slave_num) 
                    2'b00: cs0 <= 1'b0;
                    2'b01: cs1 <= 1'b0;
                    2'b10: cs2 <= 1'b0; 
                    2'b11: begin
                        cs0 <= 1'b1;
                        cs1 <= 1'b1;
                        cs2 <= 1'b1;  
                    end  
                    default: begin
                        cs0 <= 1'b1;
                        cs1 <= 1'b1;
                        cs2 <= 1'b1;  
                    end  
                endcase
                if ( cpol == 1'b0 && cpha == 1'b0) mode = 0;
                else if (cpol == 1'b0 && cpha == 1'b1) mode = 1;
                else if (cpol == 1'b1 && cpha == 1'b0) mode = 1;
                else if (cpol == 1'b1 && cpha == 1'b1) mode = 0;
                
                case (mode)
                    1 : mosi = data[7];
                    0 : begin
                            data[7:1] <= data[6:0]; //left shift 
                            data[0] <= miso;
                        end
                endcase 
            end
            else if ( enable == 1'b0 &&  data_in !==1'b0)begin // === checks bit  by bit whether it is same or not 
                data <= data_in;
                cs0 <= 1'b1;
                cs1 <= 1'b1;
                cs2 <= 1'b1;
            end
        end
        else if (clk == 0) begin
            if (rst)begin
                data <= 8'b00000000; 
                cs0 <= 1'b1;
                cs1 <= 1'b1;
                cs2 <= 1'b1;
                mosi <= 1'b0;
            end
            else if (enable === 1) begin   
                case(slave_num)
                    2'b00: cs0 <= 1'b0;
                    2'b01: cs1 <= 1'b0;
                    2'b10: cs2 <= 1'b0;
                    2'b11: begin
                        cs0 <= 1'b1;
                        cs1 <= 1'b1;
                        cs2 <= 1'b1;  
                    end
                    default: begin
                        cs0 <= 1'b1;
                        cs1 <= 1'b1;  
                        cs2 <= 1'b1;  
                    end  
                endcase
                if (cpol === 1'b0 && cpha === 1'b0) mode = 0;
                else if (cpol === 1'b0 && cpha === 1'b1) mode = 1;
                else if (cpol === 1'b1 && cpha === 1'b1) mode = 1;
                else if (cpol === 1'b1 && cpha === 1'b0) mode = 0;
                
                case (mode)
                    1: begin
                        data[7:1] <= data[6:0]; // leftv shift of bits
                        data[0] <= miso;    
                    end
                    0: mosi <= data[7];
                endcase 
            end
            else if (enable === 1'b0 && data_in !== 1'b0) begin
                data <= data_in;
                cs0 <= 1'b1;
                cs1 <= 1'b1;
                cs2 <= 1'b1;
            end
         end
     end 
endmodule

module slave(
    input [7:0]slave_data_in,
    output [7:0] slave_data_out,
    input clk,
    input rst,
    input cpha,
    input mosi,
    output reg miso,
    input cs
    );
    reg [7:0] data;
    integer mode = 0;
    
    assign slave_data_out = data;
    // cpha decides if the data should be sampled at the raising edge or the falling edge
    //https://onlinedocs.microchip.com/pr/GUID-6F1B86DC-C230-43D1-A405-0CC2E7EDF7EE-en-US-2/index.html?GUID-EAC2D943-F395-4D47-98C8-4EEBC798BFA2
    always @(  posedge clk ) begin
        if( rst )begin
            data <= 8'b00000000;
            miso <=1'b0;
        end
        else if( cs === 1'b0 )begin
            if( cpha == 1'b0 ) mode = 0;
            else mode = 1;
            case(mode)
                0 : miso=data[7];
                 1: begin
                    data[7:1] <= data[6:0];
                    data[0] <= mosi;
                    end
            endcase
        end
        else if (cs === 1'b1 && slave_data_in!== 1'b0)begin
            data <= slave_data_in;        
        end    
    end
    always @ (negedge clk) begin
        if (rst) begin
            data <= 8'b00000000;
            miso <= 1'b0;
        end
        else if (cs === 1'b0) begin
            if (cpha === 1'b0) mode = 0;
            else mode = 1;
        
            case (mode)
                0: begin
                    data[7:1] <= data[6:0];
                    data[0] <= mosi;
                    end
                1: miso <= data[7];
            endcase
        end
        else if (cs === 1'b1 && slave_data_in !== 1'b0)
        data <= slave_data_in;  
end 
endmodule
module SPIbus(
    input [7:0] master_data_in,
    input [7:0] slave0_data_in,
    input [7:0] slave1_data_in,
    input [7:0] slave2_data_in,
    output wire [7:0] master_data_out,
    output wire [7:0] slave0_data_out,
    output wire [7:0] slave1_data_out,
    output wire [7:0] slave2_data_out,
    input [1:0] slave_num,
    input enable,
    input rst,
    input cpha,
    input cpol,
    input clk
    );
    wire miso,miso1, miso2, miso3,mosi,cs0,cs1,cs2;

    assign miso = (slave_num == 0) ? miso1 : (slave_num == 1) ? miso2 : miso3;

    master m (master_data_in ,master_data_out ,slave_num ,clk , enable ,rst ,cpha ,cpol ,miso ,mosi ,cs0 ,cs1 ,cs2 );
    slave s1 (slave0_data_in ,slave0_data_out ,clk ,reset ,cpha , miso1, mosi ,cs0);
    slave s2 (slave1_data_in ,slave1_data_out ,clk ,reset ,cpha , miso2, mosi ,cs1);
    slave s3 (slave2_data_in ,slave2_data_out ,clk ,reset ,cpha , miso3, mosi ,cs2);
endmodule 
